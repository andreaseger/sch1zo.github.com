<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: source.old | meh...]]></title>
  <link href="http://sch1zo.github.com/blog/categories/source-old/atom.xml" rel="self"/>
  <link href="http://sch1zo.github.com/"/>
  <updated>2012-01-19T18:56:13+01:00</updated>
  <id>http://sch1zo.github.com/</id>
  <author>
    <name><![CDATA[Andreas Eger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Ruby's throw works and whats awesome about Sinatra's halt]]></title>
    <link href="http://sch1zo.github.com/blog/2012/01/19/how-rubys-throw-works-and-whats-awesome-about-sinatras-halt/"/>
    <updated>2012-01-19T18:39:00+01:00</updated>
    <id>http://sch1zo.github.com/blog/2012/01/19/how-rubys-throw-works-and-whats-awesome-about-sinatras-halt</id>
    <content type="html"><![CDATA[<p>Just discovered two great blog posts. ( via <a href="http://rubyweekly.com/">Ruby Weekly</a>)</p>

<ul>
<li><a href="http://rubylearning.com/blog/2011/07/12/throw-catch-raise-rescue-im-so-confused/">Throw, Catch, Raise, Rescue… I’m so confused!</a> by Avid Grimm</li>
<li><a href="http://myronmars.to/n/dev-blog/2012/01/why-sinatras-halt-is-awesome">Why Sinatra's Halt is Awesome</a> by Myron Marston</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress for the win]]></title>
    <link href="http://sch1zo.github.com/blog/2012/01/02/octopress-for-the-win/"/>
    <updated>2012-01-02T05:02:00+01:00</updated>
    <id>http://sch1zo.github.com/blog/2012/01/02/octopress-for-the-win</id>
    <content type="html"><![CDATA[<p>New Year, new Blog.</p>

<p>I decided to kill my tumblr and start this octopress blog. At the moment I
just imported most of the old posts and fixed tags/categories, but I still
have to check all links and move some images.</p>

<p>And just for the record here are a few of the snippets used to convert the
posts.</p>

<p>``` sh</p>

<h1>download and extract posts in jekyll format</h1>

<p>wget https://github.com/stephenmcd/jekyll/blob/master/lib/jekyll/migrators/tumblr.rb
ruby -r './tumblr' -e 'Jekyll::Tumblr.process("http://sch1zo.tumblr.com",format="md")'</p>

<h1>exchange tags for categories</h1>

<p>perl -pi -e '$.==4 and s/tags/categories/;close ARGV if eof' *</p>

<h1>add a tumbler tag/category to each post</h1>

<p>perl -pi -e '$.==5 and s/<sup>/-</sup> tumblr\n/;close ARGV if eof' *
```</p>

<p>yeah I know, Perl WTF!? These snippets just were the first thing google/stackoverflow gave me
after searching for this kind a task, and I didn't want to convert them to Ruby
or anything else.</p>

<p>Unfortunatly I couldn't find a way to write the date into the meta data of the
file. Perhaps I'm just to tired...</p>

<p>Here is what I got(this time in ruby). After failing here I just went ahead ant edited the 19 files
by hand.</p>

<p><code>sh
ruby -pie '$.==4 and $_.sub!(/^/, "date: #{"2011-03-02-here should be the current filename".match(/(\d{4}-\d{2}-\d{2}).*/)[1]}\n")' *
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compiling ruby 1.8.7 with gcc 4.6.*]]></title>
    <link href="http://sch1zo.github.com/blog/2011/09/09/compiling-ruby-187-with-gcc-46/"/>
    <updated>2011-09-09T00:00:00+02:00</updated>
    <id>http://sch1zo.github.com/blog/2011/09/09/compiling-ruby-187-with-gcc-46</id>
    <content type="html"><![CDATA[<p>the last few days I reinstalled archlinux and encountered a problem. <strong>You
can't compile ruby 1.8.7 or REE 1.8.7 with gcc4.6</strong>. Earlier versions probably
have the same issue, but at least 1.9.2 or newer works.</p>

<p>But I wanted ree installed because its load requirements faster than the newer
build which is important when developing rails.</p>

<!-- more -->


<p>After some googling I just grabbed the source from github and compiled it
myself without relying on the default installer.</p>

<p>You will get 2 errors but they basically the same. While building ruby at some
point two files get generated <code>callback.func</code> and <code>cbtables.func</code>.
Unfortunately later on exactly these two files are wrong…</p>

<p>The - when you know what to do - easy solution is the following</p>

<p>``` sh
cd ext/dl
rm callback.func cbtables.func
touch callback.func cbtables.func</p>

<p>ruby mkcallback.rb >> callback.func
ruby mkcbtables.rb >> cbtables.func
```</p>

<p>After this go back to the root source folder and run <code>make</code> again. Make will
start at the position of the last error, use the new files and finish
building.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to compile a fast imagemagick]]></title>
    <link href="http://sch1zo.github.com/blog/2011/09/06/how-to-compile-a-fast-imagemagick/"/>
    <updated>2011-09-06T00:00:00+02:00</updated>
    <id>http://sch1zo.github.com/blog/2011/09/06/how-to-compile-a-fast-imagemagick</id>
    <content type="html"><![CDATA[<p>yesterday I had to install <a href="http://www.imagemagick.com">ImageMagick</a> to do
some image processing on a new webapp I'm building - creating thumbnails of
uploaded images to be precise.</p>

<p>The initial choice was to simply use the the package from the repository. But
it was unbarable slow to simply create a 100x100 thumbnail of a 1080p
wallpaper which I used to test it( time sad a little above 7 seconds).</p>

<!-- more -->


<p>So the logical next step was to get the source and compile ImageMagick by
hand. But I didn't stopped there. After a quick search I found some tips to
get it even faster:</p>

<ul>
<li>first lets mess around with the compiler optimization I found <a href="http://wikis.sun.com/display/AppPerfTuning/ImageMagick">here</a> but I did not change the CC CXX or CFLAGS instead I only modified CXXFLAGS</li>
</ul>


<p>export CXXFLAGS = "-g0 -fast -zlazyload"</p>

<ul>
<li>make it use only about half the memory configure with with-quantum-depth=8 instead of the default 16</li>
</ul>


<p>./configure --with-quantum-depth=8</p>

<p>If this gives you a snappy imagemagick your fine, but on my ubuntu server a
simple resize still took 7 seconds.</p>

<p>So I did a little bit more searching and found out that a buggy OpenMP can
cause this issue and disabling it while compiling fixes the slowness.</p>

<p><strong>Finally here my complete configure line</strong></p>

<p><code>sh
./configure CXX="g++" CXXFLAGS="-g0 -fast -zlazyload" --with-quantum-depth=8 --disable-openmp
</code></p>

<hr />

<p>I know this post is a mess, but I dont care</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOWTO: establishing a SSH tunnel and use it as SOCKS proxy]]></title>
    <link href="http://sch1zo.github.com/blog/2011/08/16/howto-establishing-a-ssh-tunnel-and-use-it-as-socks-proxy/"/>
    <updated>2011-08-16T00:00:00+02:00</updated>
    <id>http://sch1zo.github.com/blog/2011/08/16/howto-establishing-a-ssh-tunnel-and-use-it-as-socks-proxy</id>
    <content type="html"><![CDATA[<p>I have one last post regarding my plan to reroute certain web traffic through
my server.</p>

<p>This post maybe should have been the first in this little series, because I
will show you how to setup a SOCKS proxy to your server.</p>

<!-- more -->


<h2>Putty</h2>

<p>I'd like to think that you already have a session which connects to your
server via ssh. Load this session and go in the menu to the item
<strong>Connection</strong> -> <strong>SSH</strong> -> <strong>Tunnels</strong>.</p>

<p>Enter the portnumber of your choice into the field <strong>Source Port</strong> for example
1234.</p>

<p>Than select <em>Dynamic</em> and <em>Auto</em> and click <strong>Add</strong>. You will now see <strong>D1234</strong>
in the list above.</p>

<p>You can now go back the the sessions screen, save your changes and open the
connection.</p>

<h2>unix</h2>

<p>for unix it is quite simple</p>

<pre><code>ssh -ND 1234 user@server.com
</code></pre>

<p>This will open a SOCKS proxy on port 1234 to the server. <strong>-N</strong> Tells prevents
the console from executing any remote command. This way it will just open the
tunnel and than sits there and waits for you to close it (with CTRL+C) later.
With an additional <strong>-f</strong> it is also possible to completely background the
process, but than its not as easy for you to close the tunnel later.</p>
]]></content>
  </entry>
  
</feed>
